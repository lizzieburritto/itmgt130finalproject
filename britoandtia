CREATE TABLE patients (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  birthdate DATE NOT NULL,
  address VARCHAR(255) NOT NULL,
  contact VARCHAR(255) NOT NULL
);

CREATE TABLE appointments (
  id SERIAL PRIMARY KEY,
  patient_id INTEGER NOT NULL REFERENCES patients(id),
  dentist_name VARCHAR(255) NOT NULL,
  appointment_time TIMESTAMP NOT NULL,
  clinic_room VARCHAR(255) NOT NULL
);

CREATE TABLE clinic_rooms (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL
);

INSERT INTO clinic_rooms (name) VALUES
  ('Clinic Room A'),
  ('Clinic Room B'),
  ('Clinic Room C');

INSERT INTO patients (name, birthdate, address, contact)
  VALUES ('John Doe', '1990-01-01', '123 Main St.', '555-1234'),
         ('Jane Smith', '1985-02-15', '456 Oak Ave.', '555-5678');

CREATE FUNCTION check_availability(dentist_name VARCHAR(255), datetime_slot TIMESTAMP)
RETURNS BOOLEAN
AS $$
BEGIN
  IF EXISTS (
    SELECT 1
    FROM appointments
    WHERE dentist_name = check_availability.dentist_name
    AND appointment_time = check_availability.datetime_slot
  ) THEN
    RETURN FALSE;
  ELSE
    RETURN TRUE;
  END IF;
END;
$$ LANGUAGE plpgsql;

CREATE FUNCTION make_appointment(patient_id INTEGER, dentist_name VARCHAR(255), datetime_slot TIMESTAMP, clinic_room VARCHAR(255))
RETURNS VOID
AS $$
BEGIN
  IF check_availability(dentist_name, datetime_slot) THEN
    INSERT INTO appointments (patient_id, dentist_name, appointment_time, clinic_room)
      VALUES (patient_id, dentist_name, datetime_slot, clinic_room);
  ELSE
    RAISE EXCEPTION 'Dentist % is not available at %', dentist_name, datetime_slot;
  END IF;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION get_available_dentists(day_of_week VARCHAR(255), time_of_day TIME)
RETURNS TABLE (name VARCHAR(255), shift VARCHAR(255), clinic_room VARCHAR(255))
AS $$
BEGIN
  RETURN QUERY
    SELECT d.name, d.shift, d.clinic_room
    FROM dentist_details d
    WHERE day_of_week = ANY(d.days_available)
    AND time_of_day BETWEEN d.start_time AND d.end_time;
END;
$$ LANGUAGE plpgsql;
